/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Vista;

import Modelo.Cuadro;
import java.awt.Graphics;

/**
 *
 * @author omara
 */
public class PnlTablero extends javax.swing.JPanel {

    private Cuadro[][] tablero;

    /**
     * Creates new form Dots
     * @param tablero
     */
    public PnlTablero(Cuadro[][] tablero) {
        initComponents();
        // Initialize the game board with 4 rows and 4 columns
        this.tablero = tablero;
        // Initialize each box with all sides unpainted      
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        paintBoard(g, tablero);
    }
        public void paintBoard(Graphics g, Cuadro[][] boxes) {
        int boxSize = 70; // size of each box
        int padding = 0; // padding between tablero
        int dotSize = 10; // size of each dot
        int startX = 170; // starting X position
        int startY = 40; // starting Y position

        // iterate through each box in the array
        for (int i = 0; i < boxes.length; i++) {
            for (int j = 0; j < boxes[0].length; j++) {
                Cuadro box = boxes[i][j];

                // calculate the position of the top left corner of the box
                int x = startX + (boxSize + padding) * j;
                int y = startY + (boxSize + padding) * i;

                // draw the top left dot
                g.fillOval(x - dotSize / 2, y - dotSize / 2, dotSize, dotSize);

                // draw the top right dot
                g.fillOval(x + boxSize - dotSize / 2, y - dotSize / 2, dotSize, dotSize);

                // draw the bottom left dot
                g.fillOval(x - dotSize / 2, y + boxSize - dotSize / 2, dotSize, dotSize);

                // draw the bottom right dot
                g.fillOval(x + boxSize - dotSize / 2, y + boxSize - dotSize / 2, dotSize, dotSize);

                // if the top side is painted, draw a line across the top of the box
                if (box.arriba) {
                    g.drawLine(x, y, x + boxSize, y);
                }

                // if the right side is painted, draw a line down the right side of the box
                if (box.derecha) {
                    g.drawLine(x + boxSize, y, x + boxSize, y + boxSize);
                }

                // if the bottom side is painted, draw a line across the bottom of the box
                if (box.abajo) {
                    g.drawLine(x, y + boxSize, x + boxSize, y + boxSize);
                }

                // if the left side is painted, draw a line down the left side of the box
                if (box.izquierda) {
                    g.drawLine(x, y, x, y + boxSize);
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 730, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 472, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
